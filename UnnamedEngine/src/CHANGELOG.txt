--------------------------------------------------------------
Release 0 | Beta 0 | Development 0 | Experimental 6 (V0.1.6)

* Added DebugCamera3D
* Added RandomUtils.h

* Fixed bug: Light positions were relative to the model and
			 therefore followed their position

--------------------------------------------------------------
Release 0 | Beta 0 | Development 0 | Experimental 5 (V0.1.5)

* Added normal mapping

* Models now load much faster

* SkyBox is now interleaved

* Fixed bug: GUIFill seemed to crash engine - seemed like a
			 memory issue as the texture wasn't set to NULL
* Fixed bug: GUITextBoxSelection had same issue
* Fixed bug: GUITextBoxCursor had same issue
* Fixed bug: Some sort of memory issue changing the window
             title before creating the window

--------------------------------------------------------------
Release 0 | Beta 0 | Development 0 | Experimental 4 (V0.1.4)

* Added deferred lighting

* Changed FBO to be more efficient
* Cleaned up Mesh.h

* Replaced position buffer with shininess

--------------------------------------------------------------
Release 0 | Beta 0 | Development 0 | Experimental 3 (V0.1.3)

* Added debugging settings and basic deferred rendering

--------------------------------------------------------------
Release 0 | Beta 0 | Development 0 | Experimental 2 (V0.1.2)

* Added RenderTexture
* Added FBO
* Added GeometryBuffer

* Cleaned up MeshRenderData a bit

--------------------------------------------------------------
Release 0 | Beta 0 | Development 0 | Experimental 1 (V0.1.1)

Hello. This is a whole new game engine which has even more
changes than Andor 2. Firstly it is written in C++, which so
far has proven much better for this purpose due to not having
garbage collection which previously caused quite jagged frame
rates. This was not the only reason for doing this, as after
spending several years using Java, I thought it would a good
change.

This obviously means that there are many things that could be
improved at the current time.

Here are the list of current libraries being used:
- GLFW
- GLEW
- Assimp
- stb_image

This means that many model and image formats are now
supported, however since C++ does not have as much cross
compatibility, for the time being, there will not be any
other platforms supported other than Windows, but this
doesn't matter much as this is mainly a set of experiments.

As this is the first entry, there are not many changes here.

* Models now use interleaved VBOs